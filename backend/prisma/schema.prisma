// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workouts  Workout[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  activities Activity[]
}

model Workout {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String   // "run", "bike", "swim", "strength", etc.
  title       String
  description String?
  date        DateTime
  duration    Int?     // minutes
  distance    Float?   // kilometers
  elevation   Float?   // meters
  
  // Detailed metrics
  avgHeartRate Int?
  maxHeartRate Int?
  calories     Int?
  
  // Planning
  planned      Boolean  @default(false)
  completed    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  activities  Activity[]
}

model Follows {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId])
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId String?
  workout   Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  
  type      String   // "workout_completed", "workout_planned", "follow", etc.
  content   String
  createdAt DateTime @default(now())
}